-> introduction to flask web framework course
  -> this course is designed to teach you how to build a web application using the flask framework in python, focusing on hands-on learning with practical examples

-> why learn flask?
  -> flask is a lightweight yet powerful python web framework, suitable for building web applications and data science project dashboards
  -> it is used by major companies like netflix, reddit, and lyft for its simplicity and scalability
  -> flask allows developers to create web applications with minimal code. for example:

    ```python
    from flask import Flask
    app = Flask(__name__)

    @app.route("/")
    def home():
      return "Welcome to Flask!"

    if __name__ == "__main__":
      app.run(debug=True)
    ```
  -> flask's compatibility with python makes it ideal for beginners and experienced developers alike

-> prerequisites
  -> basic programming knowledge, especially in python. for instance, familiarity with python functions:

    ```python
    def greet(name):
      return f"Hello, {name}!"
    print(greet("Alice"))
    ```
  -> understanding of html and css to design web interfaces
  -> basic knowledge of databases (e.g., tables, queries) and web concepts (e.g., http, urls)
  -> experience using the command line to navigate directories and execute scripts
  -> familiarity with version control using git and github for managing code changes

-> python programming requirements
  -> at least 3 months of python experience is recommended. you should understand:
    -> packages and modules:

      ```python
      import math
      print(math.sqrt(16))
      ```
    -> functions and decorators:

      ```python
      def decorator(func):
        def wrapper():
          print("Before function")
          func()
          print("After function")
        return wrapper

      @decorator
      def say_hello():
        print("Hello!")

      say_hello()
      ```
    -> object-oriented programming concepts like classes and inheritance

  -> beginners with experience in languages like java or ruby can adapt to flask easily

-> command line
  -> comfort with using cli is essential for tasks like creating directories, running python scripts, and installing libraries

    ```bash
    mkdir flask_app
    cd flask_app
    python3 -m venv venv
    source venv/bin/activate
    pip install flask
    ```

-> git and github
  -> basic understanding of git commands like `git init`, `git commit`, and `git push`
  -> you will use github to store and update your project as it evolves

-> course structure
  -> the course follows a "read, watch, and do" approach:
    -> read documentation to understand concepts
    -> watch video tutorials for demonstrations
    -> complete assignments and quizzes to apply knowledge

-> course objectives
  -> develop a music-sharing social networking app called "ragtime"
  -> learn to use restful apis to integrate functionalities
  -> manage databases using flask-sqlalchemy

    ```python
    from flask_sqlalchemy import SQLAlchemy
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///example.db"
    db = SQLAlchemy(app)

    class User(db.Model):
      id = db.Column(db.Integer, primary_key=True)
      name = db.Column(db.String(80), nullable=False)
    ```

  -> authenticate users and manage roles using flask extensions
  -> deploy the application on heroku

-> key concepts covered
  -> setting up flask and creating virtual environments
  -> using jinja2 for templating and bootstrap for front-end design
  -> error handling and advanced database relationships
  -> testing applications to ensure reliability
  -> deploying applications on cloud platforms like heroku

-> end goals
  -> build professional-grade web apps with python and flask
  -> create visually appealing templates using flask and bootstrap
  -> write and test robust, scalable code

-> mentorship programme
  -> the codingnomads mentorship programme offers:
    -> weekly 1-on-1 sessions for personalised guidance
    -> access to experts via discord for troubleshooting and advice
    -> accountability and feedback to ensure progress

-> summary
  -> this course equips you with skills to build, test, and deploy flask applications. for example, creating apis:

    ```python
    from flask import Flask, jsonify
    app = Flask(__name__)

    @app.route("/api/data", methods=["GET"])
    def get_data():
      return jsonify({"data": "Sample Data"})

    if __name__ == "__main__":
      app.run(debug=True)
    ```

  -> next, explore how flask simplifies web development as a microframework